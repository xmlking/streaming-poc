version: '2.1'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:4.0.0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper:/var/lib/zookeeper
    networks:
      - reactnet

  kafka:
    image: confluentinc/cp-kafka:4.0.0
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka:/var/lib/kafka
    networks:
      - reactnet
    links:
      - zookeeper
    depends_on:
      - zookeeper

  connect:
    image: confluentinc/cp-kafka-connect:4.0.0
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - reactnet
    links:
      - kafka
      - zookeeper
    depends_on:
      - kafka
      - zookeeper

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.0.1
    ports:
    - 9200:9200
    - 9300:9300
    networks:
      - reactnet

  kibana:
    image: docker.elastic.co/kibana/kibana:6.0.1
    ports:
      - 5601:5601
    networks:
      - reactnet
    links:
      - elasticsearch

  count:
    image: klogs/count:0.1.0-SNAPSHOT
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - reactnet
    links:
      - kafka
    depends_on:
      - kafka

  web:
    image: nginx:latest
    ports:
        - 80:80
    depends_on:
      - fluentd
    networks:
      - reactnet
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access

  fluentd:
    build: ./infra/fluentd
    volumes:
      - ./infra/fluentd/conf:/fluentd/etc
    networks:
      - reactnet
    links:
      - elasticsearch
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "5"

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - reactnet

  dataflow:
#    image: somospnt/spring-cloud-data-flow-docker
    build: ./infra/dataflow
    env_file:
      - infra/dataflow/.env
    ports:
      - 9393:9393
      - 7000-7010:7000-7010
    volumes:
      - ./infra/dataflow/logs:/tmp/spring-flow/logs
    networks:
      - reactnet
    links:
      - kafka
      - kibana
      - redis

networks:
  reactnet:
    driver: bridge

volumes:
  zookeeper:
  kafka:
